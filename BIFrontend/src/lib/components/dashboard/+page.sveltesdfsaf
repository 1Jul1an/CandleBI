<script lang="ts">
    import { onMount } from 'svelte';
    import Chart from 'chart.js/auto';

    // Konfiguration der KPIs und Endpunkte
    const KPI_OPTIONS = [
        { id: 'bestseller', label: 'Bestseller Produkte', endpoint: '/dev/products/bestseller' },
        { id: 'platform_sales', label: 'Plattform Sales', endpoint: '/dev/sales/summary' },
        { id: 'platform_revenue', label: 'Plattform Umsatz', endpoint: '/dev/sales/summary' },
        { id: 'shipping_cost', label: 'Versandkosten', endpoint: '/dev/shipping/delays' }
    ];

    let selectedKpi = KPI_OPTIONS[0].id;
    let isLoading = false;
    let kpiData: any = null;
    let error = '';
    let chartRef: HTMLCanvasElement | null = null;
    let chartInstance: Chart | null = null;
    const apiBase = 'http://localhost:3000';

    function getSelectedKpiConf() {
        return KPI_OPTIONS.find(opt => opt.id === selectedKpi);
    }

    // Holt die KPI-Daten
    async function fetchKPI() {
        isLoading = true;
        error = '';
        kpiData = null;
        destroyChart();

        try {
            const conf = getSelectedKpiConf();
            if (!conf) throw new Error('No KPI selected');
            const res = await fetch(apiBase + conf.endpoint);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            kpiData = await res.json();
            setTimeout(renderChart, 100); // Chart erst zeichnen wenn DOM ready
        } catch (err) {
            error = 'Fehler beim Laden der Daten';
        } finally {
            isLoading = false;
        }
    }

    // Chart zerstÃ¶ren bei Reload/Switch
    function destroyChart() {
        if (chartInstance) {
            chartInstance.destroy();
            chartInstance = null;
        }
    }

    // PrÃ¼ft ob Daten leer/0 sind
    function isDataEmpty() {
        if (!kpiData) return true;
        if (Array.isArray(kpiData) && kpiData.length === 0) return true;
        if (Array.isArray(kpiData) && kpiData.every((x) =>
            Object.values(x).every(v => !v || v === 0))) return true;
        if (typeof kpiData === 'object' && Object.values(kpiData).every(v => !v || v === 0)) return true;
        return false;
    }

    // Chart.js Daten-Mapper
    function renderChart() {
        if (!chartRef || !kpiData || isDataEmpty()) return;
        destroyChart();

        let type = 'bar';
        let chartData, options;

        // Produkt-Bestseller
        if (selectedKpi === 'bestseller' && Array.isArray(kpiData) && kpiData[0]?.name) {
            chartData = {
                labels: kpiData.map((b) => b.name),
                datasets: [
                    {
                        label: 'Verkaufte Menge',
                        data: kpiData.map((b) => Number(b.total_quantity)),
                        backgroundColor: 'rgba(59, 130, 246, 0.85)',
                        borderRadius: 8,
                        barThickness: 22
                    },
                    {
                        label: 'Umsatz (â‚¬)',
                        data: kpiData.map((b) => Number(b.total_revenue)),
                        backgroundColor: 'rgba(16, 185, 129, 0.65)',
                        borderRadius: 8,
                        barThickness: 22
                    }
                ]
            };
        }
        // Plattform-Stats
        else if ((selectedKpi === 'platform_sales' || selectedKpi === 'platform_revenue') && Array.isArray(kpiData) && kpiData[0]?.platform) {
            chartData = {
                labels: kpiData.map((item) => item.platform),
                datasets: [
                    {
                        label: 'Verkaufte Menge',
                        data: kpiData.map((item) => Number(item.total_quantity)),
                        backgroundColor: 'rgba(59, 130, 246, 0.85)',
                        borderRadius: 8,
                        barThickness: 22
                    },
                    {
                        label: 'Umsatz (â‚¬)',
                        data: kpiData.map((item) => Number(item.total_revenue)),
                        backgroundColor: 'rgba(16, 185, 129, 0.65)',
                        borderRadius: 8,
                        barThickness: 22
                    }
                ]
            };
        }
        // Versandkosten
        else if (selectedKpi === 'shipping_cost' && Array.isArray(kpiData) && kpiData[0]?.supplier_name) {
            chartData = {
                labels: kpiData.map((b) => b.supplier_name),
                datasets: [
                    {
                        label: 'Versandkosten (â‚¬)',
                        data: kpiData.map((b) => Number(b.ship_cost)),
                        backgroundColor: 'rgba(234, 179, 8, 0.85)',
                        borderRadius: 8,
                        barThickness: 22
                    }
                ]
            };
        }
        // Fallback
        else if (Array.isArray(kpiData) && typeof kpiData[0] === 'object') {
            const keys = Object.keys(kpiData[0]).filter(k => typeof kpiData[0][k] === 'number' || !isNaN(Number(kpiData[0][k])));
            chartData = {
                labels: kpiData.map((row, idx) => row.name || row.platform || row.supplier_name || `Item ${idx + 1}`),
                datasets: keys.map((key, i) => ({
                    label: key,
                    data: kpiData.map(r => Number(r[key])),
                    backgroundColor: [
                        'rgba(59,130,246,0.85)',
                        'rgba(16,185,129,0.65)',
                        'rgba(234,179,8,0.85)',
                        'rgba(244,63,94,0.85)'
                    ][i % 4],
                    borderRadius: 8,
                    barThickness: 22
                }))
            };
        } else {
            // Keine Chart wenn kein passendes Mapping
            return;
        }

        options = {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: { display: false }
            },
            scales: {
                x: { grid: { display: false }, ticks: { font: { size: 12 } } },
                y: { beginAtZero: true, grid: { color: "#eee" }, ticks: { font: { size: 12 } } }
            }
        };

        chartInstance = new Chart(chartRef, { type, data: chartData, options });
    }

    // Table Header Mapper
    function getTableHeaders() {
        if (!kpiData || !Array.isArray(kpiData) || kpiData.length === 0) return [];
        return Object.keys(kpiData[0]);
    }

    // Chart neu rendern wenn Daten neu
    $: if (kpiData && !isDataEmpty()) {
        setTimeout(renderChart, 50);
    }

    // Erste Ladung beim Start
    onMount(() => { fetchKPI(); });
</script>

<!-- UI: Klar und modern -->
<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100 py-8">
    <div class="w-full max-w-5xl p-6 md:p-8 bg-white rounded-2xl shadow-2xl space-y-8 border border-slate-100">
        <!-- KPI Switcher -->
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-2">
            <h1 class="text-2xl md:text-3xl font-extrabold text-gray-800 tracking-tight select-none">
                Dashboard
            </h1>
            <div class="flex flex-wrap gap-2">
                {#each KPI_OPTIONS as kpi}
                    <button
                            class="px-4 py-2 rounded-xl font-semibold shadow-sm border border-slate-100 transition bg-gradient-to-br
                        {selectedKpi === kpi.id
                            ? 'from-blue-500 to-emerald-400 text-white scale-105'
                            : 'from-slate-100 to-slate-200 text-slate-600 hover:from-blue-200 hover:to-emerald-100'}
                        "
                            on:click={() => { selectedKpi = kpi.id; fetchKPI(); }}
                            disabled={isLoading}
                    >
                        {kpi.label}
                    </button>
                {/each}
            </div>
        </div>
        <!-- Chart + Tabelle/Error -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            <!-- Chart -->
            <div class="col-span-1 md:col-span-2 bg-white/90 rounded-xl shadow-md px-4 py-4 border border-slate-100 flex flex-col items-center min-h-[320px] justify-center">
                {#if isLoading}
                    <div class="text-slate-400 text-xl font-bold animate-pulse">LÃ¤dt ...</div>
                {:else if error}
                    <div class="bg-red-50 border border-red-200 rounded-xl p-4 text-red-700 text-center">{error}</div>
                {:else if isDataEmpty()}
                    <div class="flex flex-col items-center justify-center text-center">
                        <div class="text-4xl mb-2">ðŸš«</div>
                        <div class="text-lg font-semibold mb-2 text-slate-600">Keine Daten vorhanden</div>
                        <div class="text-xs text-slate-400">FÃ¼r die ausgewÃ¤hlte KPI gibt es aktuell keine Werte.</div>
                    </div>
                {:else}
                    <canvas bind:this={chartRef} class="w-full max-w-3xl" height="180"></canvas>
                {/if}
            </div>
            <!-- Tabelle -->
            <div class="col-span-1 bg-white/90 rounded-xl shadow-md px-3 py-3 border border-slate-100 flex flex-col">
                <h3 class="text-base font-semibold text-gray-700 mb-2">KPI Details</h3>
                <div class="overflow-auto max-h-60">
                    {#if !isLoading && !error && !isDataEmpty()}
                        <table class="w-full text-sm text-left">
                            <thead>
                            <tr>
                                {#each getTableHeaders() as h}
                                    <th class="py-1 px-1 text-gray-400 font-medium capitalize">{h.replace('_', ' ')}</th>
                                {/each}
                            </tr>
                            </thead>
                            <tbody>
                            {#each kpiData as row}
                                <tr class="hover:bg-slate-50 transition rounded">
                                    {#each getTableHeaders() as h}
                                        <td class="py-1 px-1 font-medium text-slate-700 truncate">{row[h]}</td>
                                    {/each}
                                </tr>
                            {/each}
                            </tbody>
                        </table>
                    {:else if isLoading}
                        <div class="text-slate-300 text-center">LÃ¤dt ...</div>
                    {:else if error}
                        <div class="text-red-400">{error}</div>
                    {:else if isDataEmpty()}
                        <div class="text-slate-300 text-center">Keine Daten</div>
                    {/if}
                </div>
            </div>
        </div>
        <div class="flex justify-end items-center pt-2 text-xs text-slate-300">
            <span class="italic">Build with SvelteKit, Tailwind, Chart.js ðŸš€</span>
        </div>
    </div>
</div>
